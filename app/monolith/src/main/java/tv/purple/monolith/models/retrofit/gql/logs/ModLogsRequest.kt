package tv.purple.monolith.models.retrofit.gql.logs

data class ModLogsRequest(
    val channelID: String,
    val senderID: String
) {
    val query: String =
        "query ViewerCardModLogsMessagesBySender(\$channelID: ID!, \$senderID: ID!, \$cursor: Cursor) {\n\t\tlogs: viewerCardModLogs(channelID: \$channelID, targetID: \$senderID) {\n\t\t\tmessages(first: 500, after: \$cursor) {\n\t\t\t\t... on ViewerCardModLogsMessagesError {\n\t\t\t\t\tcode\n\t\t\t\t}\n\t\t\t\t... on ViewerCardModLogsMessagesConnection {\n\t\t\t\t\tedges {\n\t\t\t\t\t\t...viewerCardModLogsMessagesEdgeFragment\n\t\t\t\t\t}\n\t\t\t\t\tpageInfo {\n\t\t\t\t\t\thasNextPage\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfragment viewerCardModLogsMessagesEdgeFragment on ViewerCardModLogsMessagesEdge {\n\t\t__typename\n\t\tnode {\n\t\t\t...viewerCardModLogsCaughtMessageFragment\n\t\t\t...viewerCardModLogsChatMessageFragment\n\t\t\t...viewerCardModLogsModActionsMessageFragment\n\t\t}\n\t\tcursor\n\t}\n\tfragment viewerCardModLogsChatMessageFragment on ViewerCardModLogsChatMessage {\n\t\tid\n\t\tsender {\n\t\t\tid\n\t\t\tlogin\n\t\t\tchatColor\n\t\t\tdisplayName\n\t\t\tdisplayBadges(channelID: \$channelID) {\n\t\t\t\tid\n\t\t\t\tsetID\n\t\t\t\tversion\n\t\t\t\t__typename\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t\tsentAt\n\t\tcontent {\n\t\t\ttext\n\t\t\tfragments {\n\t\t\t\ttext\n\t\t\t\tcontent {\n\t\t\t\t\t... on Emote {\n\t\t\t\t\t\temoteID: id\n\t\t\t\t\t\tsetID\n\t\t\t\t\t\ttoken\n\t\t\t\t\t}\n\t\t\t\t\t#mention\n\t\t\t\t\t... on User {\n\t\t\t\t\t\tid\n\t\t\t\t\t}\n\t\t\t\t\t__typename\n\t\t\t\t}\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t}\n\tfragment viewerCardModLogsCaughtMessageFragment on ViewerCardModLogsCaughtMessage {\n\t\tid\n\t\tstatus\n\t\tcategory\n\t\tsentAt\n\t\tresolvedAt\n\t\tcontent {\n\t\t\ttext\n\t\t\tfragments {\n\t\t\t\ttext\n\t\t\t\tcontent {\n\t\t\t\t\t... on Emote {\n\t\t\t\t\t\temoteID: id\n\t\t\t\t\t\tsetID\n\t\t\t\t\t\ttoken\n\t\t\t\t\t}\n\t\t\t\t\t... on User {\n\t\t\t\t\t\tid\n\t\t\t\t\t}\n\t\t\t\t\t__typename\n\t\t\t\t}\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t\tsender {\n\t\t\tid\n\t\t\tlogin\n\t\t\tchatColor\n\t\t\tdisplayName\n\t\t\tdisplayBadges(channelID: \$channelID) {\n\t\t\t\tid\n\t\t\t\tsetID\n\t\t\t\tversion\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t\tresolver {\n\t\t\t...sender\n\t\t}\n\t\t__typename\n\t}\n\n\tfragment viewerCardModLogsModActionsMessageFragment on ViewerCardModLogsModActionsMessage {\n\t\ttimestamp\n\t\tcontent {\n\t\t\tfallbackString\n\t\t\t...modActionTokens\n\t\t}\n\t}\n\n\tfragment modActionTokens on ModActionsLocalizedText {\n\t\tlocalizedStringFragments {\n\t\t\t...modActionText\n\t\t}\n\t}\n\n\tfragment modActionText on ModActionsLocalizedTextFragment {\n\t\ttoken {\n\t\t\t... on ModActionsLocalizedTextToken {\n\t\t\t\ttext\n\t\t\t}\n\t\t\t... on User {\n\t\t\t\tdisplayName\n\t\t\t\tlogin\n\t\t\t\tid\n\t\t\t}\n\t\t}\n\t}\n\n\tfragment sender on User {\n\t\tid\n\t\tlogin\n\t\tdisplayName\n\t\tchatColor\n\t}"
    val variables: Map<String, Any> = mapOf("channelID" to channelID, "senderID" to senderID)
}
